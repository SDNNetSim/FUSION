
[general_settings]
holding_time = 0.2                                                          ; Mean connection holding time (in seconds)
mod_assumption = DEFAULT                                                    ; Modulation assumption strategy (e.g., DEFAULT, dynamic)
mod_assumption_path = data\json_input\example_mods\default_mod_formats.json ; Path to modulation format JSON

erlang_start = 300                          ; Starting Erlang value (offered load)
erlang_stop = 1200                          ; Final Erlang value
erlang_step = 300                           ; Step size between Erlang values

max_iters = 4                               ; Number of simulation iterations per Erlang value
guard_slots = 1                             ; Number of guard slots to avoid XT
max_segments = 4                            ; Max allowed path segments per request
thread_erlangs = False                      ; Whether to run Erlangs in parallel threads
dynamic_lps = False                         ; Enable dynamic lightpath selection
fixed_grid = False                          ; Use fixed grid spacing
pre_calc_mod_selection = False              ; Pre-calculate modulation selection per path
spectrum_priority = None                    ; Spectrum prioritization strategy

num_requests = 500                          ; Total number of requests per iteration
request_distribution = {"25": 0.10, "50"    : 0.10, "100": 0.50, "200": 0.20, "400": 0.10} ; Bandwidth distribution
allocation_method = first_fit               ; Spectrum allocation strategy
k_paths = 4                                 ; Number of K-shortest paths to consider
route_method = k_shortest_path              ; Routing method used

save_snapshots = False                      ; Save state snapshots
snapshot_step = 10                          ; Snapshot interval (iterations)
print_step = 15                             ; Logging print interval
save_step = 10                              ; Statistics save interval
save_start_end_slots = False                ; Save allocation slot indices

[topology_settings]
network = NSFNet                            ; Network topology name
bw_per_slot = 12.5                          ; Bandwidth per slot (GHz)
cores_per_link = 3                          ; Number of spatial cores per fiber link
const_link_weight = False                   ; Use constant link weights
is_only_core_node = True                    ; Only core nodes have multiple cores
multi_fiber = False                         ; Enable multi-fiber support

[spectrum_settings]
c_band = 320                                ; Number of slots in C-band

[snr_settings]
snr_type = None                             ; SNR calculation type
xt_type = without_length                    ; XT model type (e.g., with_length, without_length)
beta = 0.5                                  ; XT model parameter
theta = 0.0                                 ; XT model parameter
input_power = 0.001                         ; Optical input power (Watts)

egn_model = False                                                   ; Use EGN model
phi = {"QPSK": 1, "16-QAM": 0.68, "64-QAM": 0.6190476190476191}     ; Nonlinear coefficients
bi_directional = True                                               ; Enable bidirectional links
xt_noise = False                                                    ; Enable XT-aware noise model
requested_xt = {"QPSK": -26.19, "16-QAM": -36.69, "64-QAM": -41.69} ; XT thresholds per modulation

[rl_settings]
obs_space = obs_3                      ; Observation space version
n_trials = 1                           ; Number of training trials
device = cpu                           ; Device used for training (cpu/cuda)
optimize_hyperparameters = False       ; Use Optuna for hyperparameter tuning
optuna_trials = 1                      ; Optuna optimization trials
is_training = True                     ; Enable training mode

path_algorithm = epsilon_greedy_bandit ; Algorithm for path selection
path_model = None                      ; Path to pretrained path model
core_algorithm = first_fit             ; Core allocation strategy
core_model = None                      ; Path to pretrained core model
spectrum_algorithm = first_fit         ; Spectrum allocation strategy
spectrum_model = None                  ; Path to pretrained spectrum model

render_mode = None                     ; Visualization mode
super_channel_space = 3                ; Number of slots in a superchannel

alpha_start = 0.000215                 ; Initial alpha value (exploration)
alpha_end = 0.000215                   ; Final alpha value
alpha_update = linear_decay            ; Alpha decay policy

gamma = 0.1                            ; Discount factor

epsilon_start = 0.01                   ; Initial epsilon (exploration rate)
epsilon_end = 0.01                     ; Final epsilon
epsilon_update = exp_decay             ; Epsilon decay policy

path_levels = 2                        ; Path grouping hierarchy levels
decay_rate = 0.4                       ; General decay factor

feature_extractor = path_gnn           ; Type of feature extractor
gnn_type = graph_conv                  ; GNN architecture
layers = 2                             ; GNN layer count
emb_dim = 64                           ; GNN embedding size
heads = 4                              ; Attention heads (if using GAT)

conf_param = 2                         ; Confidence parameter for RL agents
cong_cutoff = 0.9                      ; Threshold for congestion-based penalties

reward = 1                             ; Positive reward value
penalty = -10                          ; Penalty for blocking
dynamic_reward = False                 ; Enable dynamic reward adjustment
core_beta = 0.1                        ; Beta value for core reward shaping

[ml_settings]
deploy_model = False                   ; Load and deploy ML model
output_train_data = False              ; Output generated training data
ml_training = False                    ; Enable ML training
ml_model = None                        ; ML model type
train_file_path = None                 ; Path to training dataset
test_size = 0.3                        ; Proportion of test data

[file_settings]
file_type = json                       ; Output file type
