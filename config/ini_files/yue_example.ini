# An example of running the simulation with Yue's research assumptions, paper cited in run_sim.py

# For every simulation, you must label it t* (some number)
[t1]
# Valid simulation type assumptions are arash and yue
sim_type = yue
# Valid options are USNet, NSFNet, and Pan-European
network = USNet
# The holding time for the requests
holding_time = 0.2
# The arrival rate for the requests, for yue's assumptions, a range and a step MUST be specified
arrival_rate = {'start': 2, 'stop': 143, 'step': 2}
# The number of requests for a single iteration
num_requests = 10000
# The maximum number of iterations allowed
max_iters = 10
# The number of spectral slots per core for every link
spectral_slots = 128
# The frequency for one spectral slot on any given core in GHz
freq_per_slot = 12.5
# The amount of cores for every link in the network
cores_per_link = 1
# Whether link lengths are considered as weights or a constant value of one
const_link_weight = False
# How many spectral slots will be allocated for a guard band
guard_slots = 1
# The maximum number of light segments for a single request (light segment slicing)
max_segments = 1
# Whether dynamic light path slicing should be allowed or not
dynamic_lps = False
# The spectrum assignment allocation method, valid values are first_fit and best_fit
allocation_method = first_fit
# The routing policy, valid values are least_congested, nli_aware, and shortest_path
route_method = shortest_path
# Only used for nli-aware routing, determines the tradeoff between link length and nli cost
# Must be between 0.0-1.0 (Not needed for yue's assumptions)
beta = 0.5
# The keys are bandwidth in Gbps, the values can be anywhere from 0.0-1.0
# They MUST add up to 1.0 if you want the simulator the work properly
request_distribution = {"25": 0.0, "50": 0.2, "100": 0.3, "200": 0.0, "400": 0.5}
# The only valid algorithm at the moment is q-learning, note that AI may take over routing and spectrum assignment
ai_algorithm = None
# Determines if the simulation will run in training or testing mode
is_training = False
# If is_training is False, a training file path MUST be specified
train_file = None

# An example of how to run multiple threads, you ONLY have to write the labels you'd like
# to be changed between simulations, for example, the number of cores per link, all other params
# will be the same as t1
[t2]
cores_per_link = 7

# Even here, all parameters besides 'route_method' will be the same as t1, the main thread
[t3]
route_method = least_congested